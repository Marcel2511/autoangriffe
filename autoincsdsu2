// ==UserScript==
// @name         DS-Ultimate Auto-Angriffe/Unterstützung/Eroberung abschicken (Restzeitgesteuert, Zufalls-Vorlauf, Flags robust, Timing-Flag nur bei Checkbox!)
// @namespace    https://ds-ultimate.de/
// @version      4.6
// @description  Öffnet Die-Stämme-Angriffsfenster exakt 5-10 Sekunden vor Abschickzeit (nach Restzeit), Timing/Eroberung/Unterstützung je nach Feld. Start/Stopp-Button, Lösch-Option, Timing-Checkbox etc.
// @author       Marcel Wollbaum
// @match        https://ds-ultimate.de/tools/attackPlanner*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let isStopped = false;
    let deleteIntervalId = null;

    function insertUI() {
        if (document.getElementById('autoAngriffControlBox')) return;

        let box = document.createElement('div');
        box.id = 'autoAngriffControlBox';
        box.style.position = 'fixed';
        box.style.top = '20px';
        box.style.right = '20px';
        box.style.zIndex = '9999';
        box.style.background = 'rgba(255,255,255,0.97)';
        box.style.padding = '16px 24px 12px 24px';
        box.style.borderRadius = '10px';
        box.style.boxShadow = '0 4px 18px rgba(0,0,0,0.18)';
        box.style.display = 'flex';
        box.style.flexDirection = 'column';
        box.style.alignItems = 'center';
        box.style.gap = '10px';
        box.style.minWidth = '240px';

        // Start-Button
        let startBtn = document.createElement('button');
        startBtn.id = 'autoAngriffStartBtn';
        startBtn.innerText = '🗡️ Angriffe starten';
        startBtn.style.padding = '10px 18px';
        startBtn.style.backgroundColor = '#dc3545';
        startBtn.style.color = '#fff';
        startBtn.style.border = 'none';
        startBtn.style.borderRadius = '8px';
        startBtn.style.boxShadow = '0 2px 8px rgba(0,0,0,0.15)';
        startBtn.style.fontWeight = 'bold';
        startBtn.style.fontSize = '15px';
        startBtn.style.cursor = 'pointer';
        startBtn.addEventListener('click', function() {
            startBtn.disabled = true;
            stopBtn.disabled = false;
            isStopped = false;
            let timing = timingCheckbox.checked;
            let deleteChecked = deleteCheckbox.checked;
            let autoAngriffChecked = autoAngriffCheckbox.checked;
            log('Button gedrückt: Starte Angriffs-Ausführung!');
            log('Timing nutzen: ' + (timing ? 'JA' : 'NEIN'));
            log('Automatisch im Tab abschicken: ' + (autoAngriffChecked ? 'JA' : 'NEIN'));
            log('Abgeschickte löschen: ' + (deleteChecked ? 'JA' : 'NEIN'));
            findAndStartAttacks(timing, deleteChecked, autoAngriffChecked);
        });

        // Stopp-Button
        let stopBtn = document.createElement('button');
        stopBtn.id = 'autoAngriffStopBtn';
        stopBtn.innerText = '⏹️ Stoppen';
        stopBtn.style.padding = '8px 18px';
        stopBtn.style.backgroundColor = '#212529';
        stopBtn.style.color = '#fff';
        stopBtn.style.border = 'none';
        stopBtn.style.borderRadius = '8px';
        stopBtn.style.boxShadow = '0 2px 8px rgba(0,0,0,0.08)';
        stopBtn.style.fontWeight = 'bold';
        stopBtn.style.fontSize = '14px';
        stopBtn.style.cursor = 'pointer';
        stopBtn.style.marginTop = '5px';
        stopBtn.disabled = true;
        stopBtn.addEventListener('click', function() {
            isStopped = true;
            stopBtn.disabled = true;
            startBtn.disabled = false;
            stopDeleteInterval();
            log('Stopp-Button gedrückt. Weitere Angriffe werden nicht mehr ausgeführt.');
        });

        // Timing Checkbox
        let timingBox = document.createElement('div');
        timingBox.style.display = 'flex';
        timingBox.style.alignItems = 'center';
        timingBox.style.gap = '6px';
        var timingCheckbox = document.createElement('input');
        timingCheckbox.type = 'checkbox';
        timingCheckbox.id = 'autoAngriffTimingBox';
        let timingLabel = document.createElement('label');
        timingLabel.htmlFor = 'autoAngriffTimingBox';
        timingLabel.style.fontSize = '15px';
        timingLabel.style.color = '#333';
        timingLabel.style.cursor = 'pointer';
        timingLabel.innerText = 'Timing nutzen';
        timingBox.appendChild(timingCheckbox);
        timingBox.appendChild(timingLabel);

        // Löschen Checkbox
        let deleteBox = document.createElement('div');
        deleteBox.style.display = 'flex';
        deleteBox.style.alignItems = 'center';
        deleteBox.style.gap = '6px';
        var deleteCheckbox = document.createElement('input');
        deleteCheckbox.type = 'checkbox';
        deleteCheckbox.id = 'autoAngriffDeleteBox';
        let deleteLabel = document.createElement('label');
        deleteLabel.htmlFor = 'autoAngriffDeleteBox';
        deleteLabel.style.fontSize = '15px';
        deleteLabel.style.color = '#333';
        deleteLabel.style.cursor = 'pointer';
        deleteLabel.innerText = 'Abgeschickte löschen';
        deleteBox.appendChild(deleteCheckbox);
        deleteBox.appendChild(deleteLabel);

        // Auto-Angriff Checkbox
        let autoAngriffBox = document.createElement('div');
        autoAngriffBox.style.display = 'flex';
        autoAngriffBox.style.alignItems = 'center';
        autoAngriffBox.style.gap = '6px';
        var autoAngriffCheckbox = document.createElement('input');
        autoAngriffCheckbox.type = 'checkbox';
        autoAngriffCheckbox.id = 'autoAngriffFlagBox';
        let autoAngriffLabel = document.createElement('label');
        autoAngriffLabel.htmlFor = 'autoAngriffFlagBox';
        autoAngriffLabel.style.fontSize = '15px';
        autoAngriffLabel.style.color = '#333';
        autoAngriffLabel.style.cursor = 'pointer';
        autoAngriffLabel.innerText = 'Automatisch im Tab abschicken';
        autoAngriffBox.appendChild(autoAngriffCheckbox);
        autoAngriffBox.appendChild(autoAngriffLabel);

        box.appendChild(startBtn);
        box.appendChild(stopBtn);
        box.appendChild(timingBox);
        box.appendChild(deleteBox);
        box.appendChild(autoAngriffBox);

        document.body.appendChild(box);
    }

    function log(msg, obj) {
        if(obj !== undefined) {
            console.log('[DS-Ultimate AutoAngriff] ' + msg, obj);
        } else {
            console.log('[DS-Ultimate AutoAngriff] ' + msg);
        }
    }

    function triggerMouseClick(element) {
        var event = new MouseEvent('click', {
            view: window,
            bubbles: true,
            cancelable: true
        });
        element.dispatchEvent(event);
    }

    function startDeleteInterval() {
        if (deleteIntervalId) stopDeleteInterval();
        log('Starte automatisches Löschen abgeschickter Angriffe alle 15 Sekunden.');
        deleteIntervalId = setInterval(() => {
            if (isStopped) return;
            let deleteBtn = document.querySelector('input.btn.bg-warning.btn-sm.float-left.link.ml-4[value="abgeschickte Angriffe löschen"]');
            if (deleteBtn) {
                log('Klicke "abgeschickte Angriffe löschen"-Button!');
                triggerMouseClick(deleteBtn);
            } else {
                log('Löschen-Button nicht gefunden!');
            }
        }, 15000);
    }
    function stopDeleteInterval() {
        if (deleteIntervalId) {
            clearInterval(deleteIntervalId);
            deleteIntervalId = null;
            log('Automatisches Löschen gestoppt.');
        }
    }

    function finalDeleteIfChecked() {
        let deleteCheckbox = document.getElementById('autoAngriffDeleteBox');
        if (deleteCheckbox && deleteCheckbox.checked) {
            let deleteBtn = document.querySelector('input.btn.bg-warning.btn-sm.float-left.link.ml-4[value="abgeschickte Angriffe löschen"]');
            if (deleteBtn) {
                log('Nach allen Angriffen: Klicke final "abgeschickte Angriffe löschen"-Button!');
                triggerMouseClick(deleteBtn);
            } else {
                log('Finales Löschen: Button nicht gefunden!');
            }
        }
    }

    function getUnixTimestampFromDateTimeMs(dtString, msString) {
        let m = dtString.match(/(\d{2})\.(\d{2})\.(\d{4}) (\d{2}):(\d{2}):(\d{2})/);
        if (!m) return null;
        let d = new Date(Date.UTC(+m[3], +m[2]-1, +m[1], +m[4], +m[5], +m[6]));
        let ms = parseInt(msString || "0", 10);
        return d.getTime() + ms;
    }

    function restzeitZuSekunden(resttext) {
        // Beispiel: "00:04:09"
        let match = resttext.match(/(\d{2}):(\d{2}):(\d{2})/);
        if (!match) return null;
        return parseInt(match[1])*3600 + parseInt(match[2])*60 + parseInt(match[3]);
    }

    function findAndStartAttacks(useTiming, useDelete, useAutoAngriff) {
        let tries = 0;
        let maxTries = 20;
        function tryFind() {
            tries++;
            log('Suche nach Angriff-Links, Versuch ' + tries + '...');
            let attackLinks = document.querySelectorAll('a.text-success');
            if (attackLinks.length > 0) {
                log('Erfolg: ' + attackLinks.length + ' Angriff-Links gefunden!');
                if (useDelete) startDeleteInterval();
                else stopDeleteInterval();
                if (useTiming) {
                    restzeitgesteuertOeffnen(attackLinks, useAutoAngriff, useTiming);
                } else {
                    startAttacksSofort(attackLinks, useAutoAngriff, useTiming);
                }
            } else if (tries < maxTries) {
                setTimeout(tryFind, 500);
            } else {
                log('Keine Angriffs-Links gefunden! (Timeout nach ' + (tries*0.5) + ' Sekunden)');
                let startBtn = document.getElementById('autoAngriffStartBtn');
                let stopBtn = document.getElementById('autoAngriffStopBtn');
                if (startBtn) startBtn.disabled = false;
                if (stopBtn) stopBtn.disabled = true;
                stopDeleteInterval();
            }
        }
        tryFind();
    }

    // Restzeitgesteuert mit Vorlauf (nur wenn Timing aktiv)
    function restzeitgesteuertOeffnen(attackLinks, useAutoAngriff, useTiming) {
        let opened = Array(attackLinks.length).fill(false);
        let vorlaeufe = Array(attackLinks.length).fill(0);

        // Jeder Angriff kriegt einen eigenen random Vorlauf, aber erst zugewiesen, wenn er bereit ist!
        let loop = () => {
            if (isStopped) {
                log('Abgebrochen: Stopp wurde gedrückt.');
                return;
            }
            let countLeft = 0;
            attackLinks.forEach((link, idx) => {
                if (opened[idx]) return;
                let row = link.closest('tr');
                let id = row ? row.id : 'unbekannt';
                let startdorf = row ? row.children[1].innerText.trim() : 'unbekannt';
                let zieldorf = row ? row.children[3].innerText.trim() : 'unbekannt';
                let restzeitCell = row ? row.children[9] : null;
                let restzeitText = restzeitCell ? restzeitCell.innerText.match(/(\d{2}:\d{2}:\d{2})/)?.[1] : null;
                let restSek = restzeitText ? restzeitZuSekunden(restzeitText) : null;

                if (restSek === null) {
                    log(`[${idx}] Keine Restzeit gefunden in der Zeile (${startdorf} -> ${zieldorf}).`);
                    return;
                }
                if (!vorlaeufe[idx]) {
                    // Zu Beginn, oder jedes Mal, einen random Vorlauf in [5, 10] setzen
                    vorlaeufe[idx] = Math.floor(Math.random() * 6) + 5;
                }
                let vorlauf = vorlaeufe[idx];
                log(`[${idx}] Restzeit ${restzeitText} = ${restSek}s, Ziel-Vorlauf: ${vorlauf}s (${startdorf} -> ${zieldorf})`);
                if (restSek > vorlauf) {
                    countLeft++;
                    return;
                }
                if (restSek <= vorlauf) {
                    // Angriff bereit, alle Flags aufbauen
                    let ankunftsZelle = row ? row.children[8] : null;
                    let ankunftszeit = '', msText = '';
                    if (ankunftsZelle) {
                        let dateMatch = ankunftsZelle.innerText.match(/(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2})/);
                        ankunftszeit = dateMatch ? dateMatch[1] : '';
                        let msNode = ankunftsZelle.querySelector('small');
                        msText = msNode ? msNode.textContent.trim() : '000';
                    }
                    let ankunftszeit_unix_ms = ankunftszeit ? getUnixTimestampFromDateTimeMs(ankunftszeit, msText) : null;
                    // Typ: Angriff/Unterstützung/Eroberung
                    let eroberungFlag = false;
                    let befehl = 'angriff';
                    try {
                        let typCell = row.children[6];
                        let img = typCell ? typCell.querySelector('img[data-content]') : null;
                        let datacontent = img ? img.getAttribute('data-content') : '';
                        if (datacontent && datacontent.toLowerCase().includes('unterstützung')) {
                            befehl = 'unterstuetzung';
                        }
                        if (datacontent && datacontent.toLowerCase().includes('eroberung')) {
                            eroberungFlag = true;
                        }
                    } catch (e) {}

                    let openUrl = link.href;
                    let params = [];
                    if (useTiming && ankunftszeit_unix_ms) params.push('ankunftsZeit=' + encodeURIComponent(ankunftszeit_unix_ms));
                    if (useAutoAngriff) params.push('autoangriff=1');
                    params.push('befehl=' + befehl);
                    if (eroberungFlag) params.push('eroberung=1');
                    if (params.length > 0) {
                        openUrl += (openUrl.includes('?') ? '&' : '?') + params.join('&');
                    }
                    log(`[${idx}] Restzeit ${restzeitText} = ${restSek}s, öffne Angriff (Vorlauf: ${vorlauf}s): ` + openUrl);
                    window.open(openUrl, '_blank');
                    opened[idx] = true;
                }
            });
            // Prüfen ob noch was übrig ist
            if (opened.filter(Boolean).length < attackLinks.length && !isStopped) {
                setTimeout(loop, 500);
            } else {
                log('Alle Angriffe durchgeführt oder gestoppt.');
                let startBtn = document.getElementById('autoAngriffStartBtn');
                let stopBtn = document.getElementById('autoAngriffStopBtn');
                if (startBtn) startBtn.disabled = false;
                if (stopBtn) stopBtn.disabled = true;
                stopDeleteInterval();
                finalDeleteIfChecked();
            }
        };
        loop();
    }

    // Sofort-Modus (kein Timing)
    function startAttacksSofort(attackLinks, useAutoAngriff, useTiming) {
        attackLinks.forEach((link, idx) => {
            let row = link.closest('tr');
            let id = row ? row.id : 'unbekannt';
            let startdorf = row ? row.children[1].innerText.trim() : 'unbekannt';
            let zieldorf = row ? row.children[3].innerText.trim() : 'unbekannt';
            let ankunftsZelle = row ? row.children[8] : null;
            let ankunftszeit = '', msText = '';
            if (ankunftsZelle) {
                let dateMatch = ankunftsZelle.innerText.match(/(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2})/);
                ankunftszeit = dateMatch ? dateMatch[1] : '';
                let msNode = ankunftsZelle.querySelector('small');
                msText = msNode ? msNode.textContent.trim() : '000';
            }
            let ankunftszeit_unix_ms = ankunftszeit ? getUnixTimestampFromDateTimeMs(ankunftszeit, msText) : null;

            // Typ: Angriff/Unterstützung/Eroberung
            let eroberungFlag = false;
            let befehl = 'angriff';
            try {
                let typCell = row.children[6];
                let img = typCell ? typCell.querySelector('img[data-content]') : null;
                let datacontent = img ? img.getAttribute('data-content') : '';
                if (datacontent && datacontent.toLowerCase().includes('unterstützung')) {
                    befehl = 'unterstuetzung';
                }
                if (datacontent && datacontent.toLowerCase().includes('eroberung')) {
                    eroberungFlag = true;
                }
            } catch (e) {}

            let openUrl = link.href;
            let params = [];
            if (useTiming && ankunftszeit_unix_ms) params.push('ankunftsZeit=' + encodeURIComponent(ankunftszeit_unix_ms));
            if (useAutoAngriff) params.push('autoangriff=1');
            params.push('befehl=' + befehl);
            if (eroberungFlag) params.push('eroberung=1');
            if (params.length > 0) {
                openUrl += (openUrl.includes('?') ? '&' : '?') + params.join('&');
            }

            setTimeout(() => {
                if (isStopped) return;
                log(`Sofort: Öffne Angriff ${startdorf} -> ${zieldorf} (${befehl}${eroberungFlag ? ", Eroberung" : ""}): ` + openUrl);
                window.open(openUrl, '_blank');
            }, idx * 1200);
        });
        setTimeout(() => {
            log('Alle Angriffe durchgeführt oder gestoppt.');
            let startBtn = document.getElementById('autoAngriffStartBtn');
            let stopBtn = document.getElementById('autoAngriffStopBtn');
            if (startBtn) startBtn.disabled = false;
            if (stopBtn) stopBtn.disabled = true;
            stopDeleteInterval();
            finalDeleteIfChecked();
        }, attackLinks.length * 1200 + 1000);
    }

    window.addEventListener('load', function() {
        log('Skript gestartet, UI wird eingefügt...');
        setTimeout(insertUI, 700);
    });

})();
